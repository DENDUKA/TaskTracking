//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskTrackingSystem.DAL.EFDAL.EFBD
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TaskTrackingSystemContext : DbContext
    {
        public TaskTrackingSystemContext()
            : base("name=TaskTrackingSystemContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<CalendarPlan> CalendarPlan { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<ProjectPathToFile> ProjectPathToFile { get; set; }
        public virtual DbSet<ProjectType> ProjectType { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Task> Task { get; set; }
        public virtual DbSet<TaskLogs> TaskLogs { get; set; }
        public virtual DbSet<CalendarDiaryEvent> CalendarDiaryEvent { get; set; }
    
        public virtual ObjectResult<GetDiaryEventInRange_Result> GetDiaryEventInRange(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDiaryEventInRange_Result>("GetDiaryEventInRange", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetProjectById_Result> GetProjectById(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectById_Result>("GetProjectById", projectIdParameter);
        }
    
        public virtual ObjectResult<GetProjectsByProjectTypeId_Result> GetProjectsByProjectTypeId(Nullable<int> projectTypeId)
        {
            var projectTypeIdParameter = projectTypeId.HasValue ?
                new ObjectParameter("ProjectTypeId", projectTypeId) :
                new ObjectParameter("ProjectTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectsByProjectTypeId_Result>("GetProjectsByProjectTypeId", projectTypeIdParameter);
        }
    
        public virtual ObjectResult<GetProjectsForAccount_Result> GetProjectsForAccount(string login)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectsForAccount_Result>("GetProjectsForAccount", loginParameter);
        }
    
        public virtual ObjectResult<GetProjectsForCompany_Result> GetProjectsForCompany(string companyId)
        {
            var companyIdParameter = companyId != null ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectsForCompany_Result>("GetProjectsForCompany", companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetProjectStoryPoints(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetProjectStoryPoints", projectIdParameter);
        }
    
        public virtual ObjectResult<GetTaskById_Result> GetTaskById(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaskById_Result>("GetTaskById", taskIdParameter);
        }
    
        public virtual ObjectResult<GetTasksByProjectId_Result> GetTasksByProjectId(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTasksByProjectId_Result>("GetTasksByProjectId", projectIdParameter);
        }
    
        public virtual ObjectResult<GetTasksForAccount_Result> GetTasksForAccount(string login)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTasksForAccount_Result>("GetTasksForAccount", loginParameter);
        }
    }
}
